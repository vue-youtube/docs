import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.27542019.js";const E=JSON.parse('{"title":"What is VueYoutube?","description":"","frontmatter":{},"headers":[],"relativePath":"introduction/overview.md","filePath":"introduction/overview.md","lastUpdated":1698498507000}'),o={name:"introduction/overview.md"},l=n(`<h1 id="what-is-vueyoutube" tabindex="-1">What is VueYoutube? <a class="header-anchor" href="#what-is-vueyoutube" aria-label="Permalink to &quot;What is VueYoutube?&quot;">â€‹</a></h1><p>Integrate the YouTube Iframe Player into your Vue 2/3 app.</p><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-label="Permalink to &quot;Motivation&quot;">â€‹</a></h2><p>I was writing a small Vue application in which I wanted to add an embedded YouTube video. At the time of writing Vue 3 was the new kid on the block and was only released for a short period of time (~ 1-2 months). Naturally I was on the hunt for a Vue plugin which provided access to the YouTube Iframe API as a Component. I found many alternatives on <a href="https://npmjs.com" target="_blank" rel="noreferrer">npmjs.com</a> but all of them were aimed at Vue 2. That&#39;s when I decided to write my own plugin / library which was compatible with the new Vue 3 plugin API and concepts. Out of these efforts <code>@techassi/vue-youtube-iframe</code> was born. <code>@vue-youtube/core</code> is the new and improved iteration under a new name, but from the same author ðŸ˜ƒ.</p><h2 id="improvements-over-techassi-vue-youtube-iframe" tabindex="-1">Improvements over @techassi/vue-youtube-iframe <a class="header-anchor" href="#improvements-over-techassi-vue-youtube-iframe" aria-label="Permalink to &quot;Improvements over @techassi/vue-youtube-iframe&quot;">â€‹</a></h2><h3 id="the-name" tabindex="-1">The Name <a class="header-anchor" href="#the-name" aria-label="Permalink to &quot;The Name&quot;">â€‹</a></h3><p>The name is much shorter and easier to understand &amp; handle:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@techassi/vue-youtube-iframe</span></span>
<span class="line"><span style="color:#6A737D;"># vs</span></span>
<span class="line"><span style="color:#B392F0;">@vue-youtube/core</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@techassi/vue-youtube-iframe</span></span>
<span class="line"><span style="color:#6A737D;"># vs</span></span>
<span class="line"><span style="color:#6F42C1;">@vue-youtube/core</span></span></code></pre></div><h3 id="supports-both-vue-2-and-3" tabindex="-1">Supports both Vue 2 and 3 <a class="header-anchor" href="#supports-both-vue-2-and-3" aria-label="Permalink to &quot;Supports both Vue 2 and 3&quot;">â€‹</a></h3><p><code>@techassi/vue-youtube-iframe</code> only supported Vue 3 (as this was the initial goal when I wrote the plugin). As mentioned in issue <a href="https://github.com/Techassi/vue-youtube-iframe/issues/4" target="_blank" rel="noreferrer">#4</a> some people requested support for Vue 2 as well. That&#39;s why I added support for both Vue 2 and 3 with the magic of <a href="https://github.com/vueuse/vue-demi" target="_blank" rel="noreferrer">VueDemi</a>. This should work instantly out-of-the-box.</p><h3 id="supports-both-component-and-composable-usage" tabindex="-1">Supports both Component and Composable Usage <a class="header-anchor" href="#supports-both-component-and-composable-usage" aria-label="Permalink to &quot;Supports both Component and Composable Usage&quot;">â€‹</a></h3><p>One of the biggest improvements is the addition of <a href="https://vuejs.org/guide/reusability/composables.html" target="_blank" rel="noreferrer">Composables</a>. This allows the creation of YouTube Iframe Players with the help of the <code>usePlayer</code> function. This aligns the plugin with Vue 3 coding styles. A sneak peak how you can use the <code>usePlayer</code> function:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { usePlayer } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vue-youtube/core&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">youtube</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">usePlayer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dQw4w9WgXcQ&#39;</span><span style="color:#E1E4E8;">, youtube);</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;youtube&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">/</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { usePlayer } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@vue-youtube/core&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">youtube</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">usePlayer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dQw4w9WgXcQ&#39;</span><span style="color:#24292E;">, youtube);</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;youtube&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">/</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>For more information see <a href="./getting-started">Getting Started</a> and <a href="/docs/usage/composable">Usage</a>.</p><h3 id="fully-typed" tabindex="-1">Fully typed <a class="header-anchor" href="#fully-typed" aria-label="Permalink to &quot;Fully typed&quot;">â€‹</a></h3><p>This plugin is completely written in TypeScript and provides strong typings. The <code>@types/youtube</code> package was dropped, but all the player instance types are still available:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">onReady</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">usePlayer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dQw4w9WgXcQ&#39;</span><span style="color:#E1E4E8;">, youtube);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">onReady</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PlayerEvent</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.target.</span><span style="color:#B392F0;">playVideo</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">onReady</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">usePlayer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dQw4w9WgXcQ&#39;</span><span style="color:#24292E;">, youtube);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">onReady</span><span style="color:#24292E;">((</span><span style="color:#E36209;">event</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PlayerEvent</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  event.target.</span><span style="color:#6F42C1;">playVideo</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="and-many-smaller-changes" tabindex="-1">And many smaller Changes <a class="header-anchor" href="#and-many-smaller-changes" aria-label="Permalink to &quot;And many smaller Changes&quot;">â€‹</a></h3><p>A few smaller but still notable changes are:</p><ul><li><strong>Video ID Reactivity:</strong> The video ID is now fully reactive, for both Composables and Components, see here.</li><li><strong>New Events:</strong> Support for the new <code>onPlaybackQualityChange</code>, <code>onPlaybackRateChange</code> and <code>onApiChange</code> events was added. More information about these events can be found <a href="https://developers.google.com/youtube/iframe_api_reference#Events" target="_blank" rel="noreferrer">here</a>.</li><li><strong>New Toolchain:</strong> The plugin now uses the modern <a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite</a> Toolchain for both development and production bundling / building.</li></ul>`,20),t=[l];function p(r,c,i,y,u,d){return a(),e("div",null,t)}const m=s(o,[["render",p]]);export{E as __pageData,m as default};
